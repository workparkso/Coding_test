"""
✅문제 설명
자연수 n이 입력으로 주어졌을 때 만약 n이 짝수이면 "n is even"을, 홀수이면 "n is odd"를 출력하는 코드를 작성해 보세요.

제한사항
1 ≤ n ≤ 1,000

입출력 예
입력 #1
100
출력 #1
100 is even

입력 #2
1
출력 #2
1 is odd

✅목적: 홀수와 짝수를 어떻게 표현하는지, 이것을 아는지 확인 목적


"""

# 코드 작성 

a = int(input())
# a가 짝수일 때
if a % 2 == 0:
    print(f"{a} is even")
# a가 홀수일 때
else:
    print(f"{a} is odd")



"""
✅다른 사람 풀이

1.
# 사용자로부터 정수 입력 받기
n=int(input())
# 짝수, 홀수를 구분하여 출력
print(f"{n} is {'eovdedn'[n&1::2]}")

1-1.
'eovdedn'은 짝수와 홀수를 나타내는 문자열이다. 여기서 짝수는 'even', 홀수는 'odd'를 나타낸다. 
이 문자열을 "비트 연산"을 통해 짝수와 홀수를 구별하는 데 사용한다.

1-2.
n&1은 비트 연산을 사용하여 n이 짝수인지 홀수인지 판별하는 방법이라고 한다.
n&1은 n의 최하위 비트를 추출한다. n이 짝수이면 마지막 비트가 0이고, n이 홀수이면 마지막 비트가 1이 된다.

1-3.
슬라이싱 'eovdedn'[n&1::2] 이라고 한다.
n&1의 결과가 0이면 'eovdedn'에서 짝수에 해당하는 문자를 가져온다.
n&1 == 0: 짝수일 경우, eovdedn[0::2]는 even을 추출한다.
n&1 == 1: 홀수일 경우, eovdedn[1::2]는 odd를 추출한다.  예시 : 'eovdedn'[1::2] → 'odd'


2.
n = int(input())
print(f"{n} is odd" if n % 2 else f"{n} is even")

2-1.
왜 n%2 == 0 또는 1로 표현 안하고 작성하는지는 다음과 같은 이유이다.
Python에서는 "0은 False, 1은 True"로 평가된다. 그래서 n%2를 그대로 조건으로 사용할 수 있다.

n%2 == 0이면 n이 짝수이고, 이는 False로 평가된다.
n%2 == 1**이면 n이 홀수이고, 이는 True로 평가된다.
이러한 결과로 조건부 표현식에서 그대로 사용할 수 있다.

다시 문제풀이를 보고 말하자면,
n%2가 True(즉, n이 홀수)일 때, "odd"를 출력한다.
n%2가 False(즉, n이 짝수)일 때, "even"을 출력한다.

3.
a = int(input())
if a %2==0:
    print(a,"is even")
else:
    print(a,"is odd")
"""



# ✅ 오늘 또한 다른 사람들 풀이를 보면서 조금 더 간략하게 작성하는 방법, 
# 또는 접근하는 새로운 방법을 알게되었다.
